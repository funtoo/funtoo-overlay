#!/usr/bin/python3

import os
import sys
sys.path.insert(0, os.path.normpath(os.path.join(os.path.realpath(__file__), "../../modules")))
import merge.merge_utils as mu
from merge.config import config

gentoo_staging_w = mu.GitTree("gentoo-staging", "master", "repos@git.funtoo.org:ports/gentoo-staging.git", root=config.dest_trees + "/gentoo-staging")

# This function updates the gentoo-staging tree with all the latest gentoo updates:

def gentoo_staging_update():
	gentoo_use_rsync = False
	if gentoo_use_rsync:
		gentoo_src = mu.RsyncTree("gentoo")
	else:
		#gentoo_src = mu.GitTree("gentoo-x86", "master", "https://github.com/gentoo/gentoo.git", pull=True)
		gentoo_src = mu.GitTree("gentoo-x86", "master", "https://anongit.gentoo.org/git/repo/gentoo.git")
		#gentoo_src = CvsTree("gentoo-x86",":pserver:anonymous@anoncvs.gentoo.org:/var/cvsroot")
		gentoo_glsa = mu.GitTree("gentoo-glsa", "master", "git://anongit.gentoo.org/data/glsa.git")
	# This is the gentoo-staging tree, stored in a different place locally, so we can simultaneously be updating gentoo-staging and reading
	# from it without overwriting ourselves:

	all_steps = [
		mu.GitCheckout("master"),
		mu.SyncFromTree(gentoo_src, exclude=[".gitignore", "eclass/.gitignore", "metadata/.gitignore", "/metadata/cache/**", "dev-util/metro"]),
		# Only include 2012 and up GLSA's:
		mu.SyncDir(gentoo_glsa.root, srcdir=None, destdir="metadata/glsa", exclude=["glsa-200*.xml","glsa-2010*.xml", "glsa-2011*.xml"]) if not gentoo_use_rsync else None,
	]

	gentoo_staging_w.run(all_steps)
	gentoo_staging_w.gitCommit(message="gentoo updates")

#	for s in shard_names:
#		shards[s].run(shard_steps[s])
#		shards[s].gitCommit(message="gentoo updates", branch="master")

gentoo_staging_update()

# vim: ts=4 sw=4 noet
