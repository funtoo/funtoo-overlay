#!/usr/bin/python3

# This utility is designed to be run on independently-maintained kits, whose paths should be specified as command-line arguments.
# All branches defined in kit-fixups will be updated to contain up-to-date python USE settings as well as metadata cache. This
# used to be done automatically by our auto-generation scripts, but since the kit is independently-maintained, we have to do
# it using this little tool.
#
# Use as follows:
#
# As a regular user with commit/push rights to the kits, set up a ~/.merge config file as follows:
#
# [sources]
#
# flora = git@github.com:funtoo/flora
# kit-fixups = git@github.com:funtoo/kit-fixups
#
# [work]
#
# source = /var/src
# destination = /var/src
#
# This is a basic config file that just indicates that the code should look for core-kit and kit-fixups in /var/src, and
# when it looks at these repos, the source URI matches what it expects.
#
# Next, make sure that your user is in the portage group and has the ability to write to /var/cache/edb:
#
# # chown -R drobbins:portage /var/cache/edb
#
# Next, run the following command, which will generate updated metadata and also add correct python-use settings to the
# independently-maintained kit, and push these to origin:
#
# cd /var/src/merge-scripts
# bin/indy-kit-update /var/src/xorg-kit /var/src/gnome-kit
#
# That's all there is to it! :)

import os
import sys
sys.path.insert(0, os.path.normpath(os.path.join(os.path.realpath(__file__), "../../modules")))
import merge.merge_utils as mu
from merge.config import Configuration
import asyncio

async def main_thread(config, args):
	
	fixup_repo = mu.GitTree("kit-fixups", config.branch("kit-fixups"), config=config, url=config.kit_fixups, root=config.source_trees + "/kit-fixups")
	await fixup_repo.initialize()
	# once the correct branch is checked out, then we want to do this import:
	sys.path.insert(0, fixup_repo.root + "/modules")
	from fixups.foundations import KitFoundation, KitType
	
	foundation = KitFoundation(config)
	
	# developer specified a path to a git repo on the command-line, now we will look in all defined releases for independently-maintained kits with this
	# name and process all defined branches:
	
	for path in args.kit_paths:
		path = os.path.realpath(path)
		print('Processing path %s' % path)
		if not os.path.isdir(path):
			print("Error: %s does not exist or is not a directory. Skipping." % path)
			continue
		kit_name = os.path.basename(path)

		for release, release_kits in foundation.kit_groups.items():
			for kit_dict in release_kits:
				if "type" not in kit_dict or kit_dict["type"] != KitType.INDEPENDENTLY_MAINTAINED:
					continue
				if "name" not in kit_dict or kit_dict["name"] != kit_name:
					continue
				# OK, if we got here, we have something to process --
				print("Processing branch %s" % kit_dict["branch"])
				repo_config = mu.RepositoryConfig(kit_name, path, kit_dict["branch"], config)
				tree = mu.GitTree(name=kit_name, root=path, config=config, branch=kit_dict["branch"], create=False)
				await tree.initialize()
				steps = [ mu.GenCache(repo_config) ] + mu.generatePythonUSEUpdateSteps(repo_config, foundation, kit_name)
				await tree.run(steps)
				await tree.gitCommit(message="python USE setting and metadata cache updates", push=True)


if __name__ == "__main__":
	import argparse
	
	parser = argparse.ArgumentParser()
	parser.add_argument("--config", type=str, default=None, help="Specify config file. Defaults to ~/.merge.")
	parser.add_argument("kit_paths", metavar="K", type=str, nargs="+", help="path to independently-maintained kits.")
	args = parser.parse_args()
	
	config = Configuration(args.config)
	
	loop = asyncio.get_event_loop()
	loop.run_until_complete(main_thread(config, args))
	sys.exit(0)
