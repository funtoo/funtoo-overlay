diff -rupN PyQwt-5.2.0/sip/qwt5qt3/common/QwtValueList.sip PyQwt-5.2.0-new/sip/qwt5qt3/common/QwtValueList.sip
--- PyQwt-5.2.0/sip/qwt5qt3/common/QwtValueList.sip	2009-02-17 10:55:14.000000000 +0100
+++ PyQwt-5.2.0-new/sip/qwt5qt3/common/QwtValueList.sip	2017-01-04 19:29:24.544837910 +0100
@@ -93,7 +93,7 @@ template<TYPE>
     // Set the list elements.
     for (int i = 0; i < sipCpp->size(); ++i) {
         TYPE *t = new TYPE(sipCpp->at(i));
-        PyObject *o = sipBuildResult(0, "N", t, sipClass_TYPE);
+        PyObject *o = sipBuildResult(0, "N", t, sipType_TYPE);
         if (!o) {
             Py_DECREF(l);
             delete t;
@@ -111,7 +111,7 @@ template<TYPE>
             return 0;
 	// Check the elements
         for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, SIP_NOT_NONE))
+            if (!sipCanConvertToType(PyList_GET_ITEM(sipPy, i), sipType_TYPE, SIP_NOT_NONE))
                 return 0;
         return 1;
     }
@@ -120,14 +120,14 @@ template<TYPE>
     for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
         int state;
         TYPE *t = reinterpret_cast<TYPE *>(
-	    sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
+        sipConvertToType(PyList_GET_ITEM(sipPy, i), sipType_TYPE, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
         if (*sipIsErr) {
-            sipReleaseInstance(t, sipClass_TYPE, state);
+            sipReleaseType(t, sipType_TYPE, state);
             delete l;
             return 0;
         }
         l->append(*t);
-        sipReleaseInstance(t, sipClass_TYPE, state);
+        sipReleaseType(t, sipType_TYPE, state);
     }
     *sipCppPtr = l;
     return sipGetState(sipTransferObj);
@@ -151,7 +151,7 @@ template<TYPE>
     // Set the list elements.
     for (int i = 0; i < int(sipCpp->size()); ++i) {
         TYPE *t = (*sipCpp)[i];
-	PyObject *o = sipConvertFromInstance(t, sipClass_TYPE, sipTransferObj);
+        PyObject *o = sipConvertFromType(t, sipType_TYPE, sipTransferObj);
         if (!o) {
             Py_DECREF(l);
             return 0;
@@ -168,7 +168,7 @@ template<TYPE>
             return 0;
 	// Check the elements
         for (int i = 0; i < PyList_GET_SIZE(sipPy); ++i)
-            if (!sipCanConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, 0))
+            if (!sipCanConvertToType(PyList_GET_ITEM(sipPy, i), sipType_TYPE, 0))
                 return 0;
         return 1;
     }
@@ -176,7 +176,7 @@ template<TYPE>
     QValueList<TYPE *> *l = new QValueList<TYPE *>;
     for (int i=0; i < PyList_GET_SIZE(sipPy); ++i) {
         TYPE *t = reinterpret_cast<TYPE *>(
-	    sipConvertToInstance(PyList_GET_ITEM(sipPy, i), sipClass_TYPE, sipTransferObj, 0, 0, sipIsErr));
+        sipConvertToType(PyList_GET_ITEM(sipPy, i), sipType_TYPE, sipTransferObj, 0, 0, sipIsErr));
         if (*sipIsErr) {
             delete l;
             return 0;
